// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// model DietaryRestrictionInfo {
    // does not have its own id, just the dish id is the primarykey for this table
    // id primary key referenecs Dish(id)
    // ContainsEggs: null,
    // ContainsFish: null,
    // ContainsMilk: null,
    // ContainsPeanuts: null,
    // ContainsShellfish: null,
    // ContainsSoy: null,
    // ContainsTreeNuts: null,
    // ContainsWheat: null,
    // ContainsSesame: null,
    // IsGlutenFree: false,
    // IsHalal: false,
    // IsKosher: true,
    // IsLocallyGrown: false,
    // IsOrganic: false,
    // IsVegan: false,
    // IsVegetarian: false,
// }

// model NutritionInfo {
//     // ServingSize: "1",
//     // ServingUnit: "each",
//     // Calories: "150",
//     // CaloriesFromFat: "5",
//     // TotalFat: "6",
//     // TransFat: "0",
//     // Cholesterol: "0",
//     // Sodium: "290",
//     // TotalCarbohydrates: "23",
//     // DietaryFiber: "less than 1",
//     // Sugars: "6",
//     // Protein: "2",
//     // VitaminA: null,
//     // VitaminC: "0.14",
//     // Calcium: "41.84",
//     // Iron: "1.12",
//     // SaturatedFat: "3.5"
// }

// model Menu {
//     // id
//     // date
//     // restaurant id
//     // menuperiod id
// }



// model Dish {
//     // dietary info
//     // nutrition info
//     // id
//     // name
//     // description
//     // 

// }

// model Station {
//     // restaurantId unique (not autogen)
//     // name unique
// }

// // breakfast, brunch, lunch, dinner, latenight
// model MenuPeriod {
//     // id String @id 
//     // restaurant Restaurant @relation()
//     // restaurantId String @id
//     // date
//     // start
//     // end
// }

// model Restaurant {
//     // id
//     // name
// }


model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
//   posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
//   published Boolean @default(false)
//   author    User    @relation(fields: [authorId], references: [id])
//   authorId  Int
}